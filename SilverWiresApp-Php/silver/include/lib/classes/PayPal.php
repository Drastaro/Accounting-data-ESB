<?php

	/**
	# API user: The user that is identified as making the call. you can
	# also use your own API username that you created on PayPal’s sandbox
	# or the PayPal live site
	*/
	
	define('API_USERNAME', 'luci_api1.jumpeye.com');
	
	/**
	# API_password: The password associated with the API user
	# If you are using your own API username, enter the API password that
	# was generated by PayPal below
	# IMPORTANT - HAVING YOUR API PASSWORD INCLUDED IN THE MANNER IS NOT
	# SECURE, AND ITS ONLY BEING SHOWN THIS WAY FOR TESTING PURPOSES
	*/
	
	define('API_PASSWORD', '48YCZU4XHZPRU2FV');
	
	/**
	# API_Signature:The Signature associated with the API user. which is generated by paypal.
	*/
	
	define('API_SIGNATURE', 'ATXHdomQ0pFW38X2ReGIuGZMdLZuAt1nkfwdOS7ARomOdDQeaNavn9zm');
	
	/**
	# Endpoint: this is the server URL which you have to connect for submitting your API request.
	*/
	
	define('API_ENDPOINT', 'https://api-3t.sandbox.paypal.com/nvp');
	
	/**
	USE_PROXY: Set this variable to TRUE to route all the API requests through proxy.
	like define('USE_PROXY',TRUE);
	*/
	define('USE_PROXY',FALSE);
	/**
	PROXY_HOST: Set the host name or the IP address of proxy server.
	PROXY_PORT: Set proxy port.
	
	PROXY_HOST and PROXY_PORT will be read only if USE_PROXY is set to TRUE
	*/
	define('PROXY_HOST', '127.0.0.1');
	define('PROXY_PORT', '808');
	
	/** Define the PayPal URL. This is the URL that the buyer is
	 *  first sent to to authorize payment with their paypal account
	 *  change the URL depending if you are testing on the sandbox
	 *  or going to the live PayPal site
	 *  For the sandbox, the URL is
	 *  https://www.sandbox.paypal.com/webscr&cmd=_express-checkout&token=
	 *  For the live site, the URL is
	 *  https://www.paypal.com/webscr&cmd=_express-checkout&token=
	 */
	define('PAYPAL_URL', 'https://www.sandbox.paypal.com/webscr&cmd=_express-checkout&token=');
	
	/**
	# Version: this is the API version in the request.
	# It is a mandatory parameter for each API request.
	# The only supported value at this time is 2.3
	*/
	
	define('VERSION', '3.0');

	class PayPal {
		
		
		var $status;
		var $error;
		
		/**
		 * Construnctor
		 *
		 * @return PayPal
		 */
		function PayPal()
		{
			$this->status = array();
			$this->error = array();
		}
		
		/**
		 * Returneaza un array cu statusul tranzactiei
		 *
		 * @return array
		 */
		function getStatus()
		{
			return $this->status;
		}
		
		/**
		 * Returneaza daca exista erori (curl) sau nu
		 *
		 * @return boolean
		 */
		function isError()
		{
			if (isset($this->error['curl_error_msg'])) {
				return true;
			}
			return false;
		}
		
		/**
		 * Returneaza mesajul de eroare pentru curl
		 *
		 * @return unknown
		 */
		function getErrorMsg()
		{
			if (isset($this->error['curl_error_msg'])) {
				return $this->error['curl_error_msg'];
			}
			return false;
		}
		
		/**
		 * Returneaza numarul erori
		 *
		 * @return unknown
		 */
		function getErrorNo()
		{
			if (isset($this->error['curl_error_no'])) {
				return $this->error['curl_error_no'];
			}
			return false;
		}
		
		/**
		 * Citeste datele dintr-un array.
		 * $this->DoDirectPayment($info['firstName'], $info['lastName'], $info['creditCardType'], $info['expDateMonth'],
		 * $info['expDateYear'], $info['cvv2Number'], $info['address1'], $info['address2'], $info['city'], $info['state'],
		 * $info['zip'], $info['amount'], $info['paymentType']);
		 * 
		 * @param array $info
		 */
		function DoDirectParmentArr($info)
		{
			if (!isset($info['paymentType'])) {
				$info['paymentType'] = 'Sale';
			}
			$this->DoDirectPayment($info['firstName'], $info['lastName'], $info['creditCardType'], $info['expDateMonth'],
			$info['expDateYear'], $info['cvv2Number'], $info['address1'], @$info['address2'], $info['city'], $info['state'],
			$info['zip'], $info['amount'], @$info['paymentType']);
		}
		
		function DoDirectPayment($firstName, $lastName, $creditCardType, $creditCardNumber, $expDateMonth,
		$expDateYear, $cvv2Number, $address1, $address2 = '', $city, $state, $zip, $amount, $paymentType = 'Sale')
		{
			$firstName			= urlencode( $firstName);
			$lastName			= urlencode( $lastName);
			$creditCardType		= urlencode( $creditCardType);
			$creditCardNumber	= urlencode( $creditCardNumber);
			$expDateMonth		= urlencode( $expDateMonth);

			# Month must be padded with leading zero
			$padDateMonth 		= str_pad($expDateMonth, 2, '0', STR_PAD_LEFT);

			$expDateYear 		= urlencode( $expDateYear);
			$cvv2Number			= urlencode( $cvv2Number);
			$address1			= urlencode( $address1);
			$address2			= urlencode( $address2);
			$city				= urlencode( $city);
			$state				= urlencode( $state);
			$zip				= urlencode( $zip);
			$amount				= urlencode( $amount);
			#$currencyCode=urlencode($_POST['currency']);
			$currencyCode		= "USD";
			$paymentType		= urlencode($paymentType);

			/**
			 * Construct the request string that will be sent to PayPal.
			 * The variable $nvpstr contains all the variables and is a
			 * name value pair string with & as a delimiter
			 */
			$nvpstr="&PAYMENTACTION=$paymentType&AMT=$amount&CREDITCARDTYPE=$creditCardType&ACCT=$creditCardNumber&EXPDATE=" .
			$padDateMonth . $expDateYear . "&CVV2=$cvv2Number&FIRSTNAME=$firstName&LASTNAME=$lastName&STREET=$address1&CITY=
$city&STATE=$state" . "&ZIP=$zip&COUNTRYCODE=US&CURRENCYCODE=$currencyCode";

			/** 
			 * Make the API call to PayPal, using API signature.
			 * The API response is stored in an associative array called $resArray 
			 */
			$this->status = $this->hash_call("doDirectPayment",$nvpstr);
		}
		
		/**
		 * Sends a RefundTransaction NVP API request to PayPal.
		 * 
		 * The code retrieves the transaction ID,amount,refund type
		 * and constructs the NVP API request string to send to the 
		 * PayPal server. The request to PayPal uses an API Signature.		
		 * 
		 * After receiving the response from the PayPal server, the
		 * code displays the request and response in the browser. If
		 * the response was a success, it displays the response
		 * parameters. If the response was an error, it displays the
		 * errors received.
		 */
		function refund($transaction_id, $refundType = 'Full', $amount = '', $currency = 'USD', $memo = '')
		{
			$transaction_id = urlencode($transaction_id);
			$refundType		= urlencode($refundType);
			$amount			= urlencode($amount);
			$currency		= urlencode($currency);
			$memo			= urlencode($memo);
			
			/**
			 *  Construct the request string that will be sent to PayPal.
			 * The variable $nvpstr contains all the variables and is a
			 * name value pair string with & as a delimiter 
			 */
			$nvpStr = "&TRANSACTIONID=$transaction_id&REFUNDTYPE=$refundType&CURRENCYCODE=$currency&NOTE=$memo";
			if(strtoupper($refundType)=="PARTIAL") {
				$nvpStr = $nvpStr . "&AMT=$amount";
			}

			/* Make the API call to PayPal, using API signature.
			The API response is stored in an associative array called $resArray */
			$this->status = $this->hash_call("RefundTransaction",$nvpStr);
		}
		
		/**
		 * Arata detaliile despre o transactie care vor fi salvate in $this->status
		 *
		 * @param string $transactionId
		 */
		function transactionDetails($transactionId)
		{
			$transactionId	= urlencode($transactionId);
			$nvpStr			= "&TRANSACTIONID=$transactionId";
			$this->status	= $this->hash_call("gettransactionDetails",$nvpStr);
		}
		
		/**
		 * Sends a TransactionSearch NVP API request to PayPal.
		 * The code retrieves the transaction ID,start date,end date
		 * and constructs the NVP API request string to send to the 
		 * PayPal server. The request to PayPal uses an API Signature.
		 * 
		 * After receiving the response from the PayPal server, the
		 * code displays the request and response in the browser. If
		 * the response was a success, it displays the response
		 * parameters. If the response was an error, it displays the
		 * errors received.
		 */
		function transactionSearch($startDate, $endDate)
		{
			$startDate = strtotime($startDate);
			$startDate = date('Y-m-d\T00:00:00\Z',  $startDate);
			$nvpStr="&STARTDATE=$startDate";
			$endDate = strtotime($endDate);
			$endDate = date('Y-m-d\T24:00:00\Z', $endDate);
			$nvpStr.="&ENDDATE=$endDate";
			$this->status = $this->hash_call("TransactionSearch", $nvpStr);
		}

		/**
		 * hash_call: Function to perform the API call to PayPal using API signature
		 *
		 * @param string $methodName - is name of API  method
		 * @param string $nvpStr  is nvp string.
		 * @return an associtive array containing the response from the server.
		 */
		function hash_call($methodName,$nvpStr)
		{
			//setting the curl parameters.
			$ch = curl_init();
			curl_setopt($ch, CURLOPT_URL,API_ENDPOINT);
			curl_setopt($ch, CURLOPT_VERBOSE, 1);
		
			//turning off the server and peer verification(TrustManager Concept).
			curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
			curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
		
			curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
			curl_setopt($ch, CURLOPT_POST, 1);
			
		    //if USE_PROXY constant set to TRUE in Constants.php, then only proxy will be enabled.
		   	//Set proxy name to PROXY_HOST and port number to PROXY_PORT in constants.php 
			if(USE_PROXY) {
				curl_setopt ($ch, CURLOPT_PROXY, PROXY_HOST . ':' . PROXY_PORT);
			}
		
			//NVPRequest for submitting to server
			$nvpreq = 'METHOD=' . urlencode($methodName) . '&VERSION=' . urlencode(VERSION) . '&PWD=' . urlencode(API_PASSWORD)
			. '&USER=' . urlencode(API_USERNAME) . '&SIGNATURE=' . urlencode(API_SIGNATURE) . $nvpStr;
			
			//setting the nvpreq as POST FIELD to curl
			curl_setopt($ch, CURLOPT_POSTFIELDS, $nvpreq);
		
			//getting response from server
			$response = curl_exec($ch);
		
			//convrting NVPResponse to an Associative Array
			$nvpResArray = $this->deformatNVP($response);
			//$nvpReqArray = $this->deformatNVP($nvpreq);
			//$_SESSION['nvpReqArray']=$nvpReqArray;
		
			if (curl_errno($ch)) {
				$this->error['curl_error_no']=curl_errno($ch) ;
				$this->error['curl_error_msg']=curl_error($ch);
			} else {
				//closing the curl
				curl_close($ch);
			}
		
		return $nvpResArray;
		}
		
		/** This function will take NVPString and convert it to an Associative Array and it will decode the response.
		  * It is usefull to search for a particular key and displaying arrays.
		  * @nvpstr is NVPString.
		  * @nvpArray is Associative Array.
		  */	
		function deformatNVP($nvpstr)
		{
			$intial=0;
		 	$nvpArray = array();

			while(strlen($nvpstr)) {
				#postion of Key
				$keypos= strpos($nvpstr,'=');
				#position of value
				$valuepos = strpos($nvpstr,'&') ? strpos($nvpstr,'&'): strlen($nvpstr);
		
				#getting the Key and Value values and storing in a Associative Array
				$keyval=substr($nvpstr,$intial,$keypos);
				$valval=substr($nvpstr,$keypos+1,$valuepos-$keypos-1);
				
				#decoding the respose
				$nvpArray[urldecode($keyval)] =urldecode( $valval);
				$nvpstr=substr($nvpstr,$valuepos+1,strlen($nvpstr));
				
		     }
			return $nvpArray;
		}

	}